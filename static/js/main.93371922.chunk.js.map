{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","styled","div","Btns","Button","button","props","prim","choices","types","Object","keys","Chooser","children","setChoice","map","c","key","onClick","length","Math","random","App","useState","type","setType","choice","restaurants","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m1BAGA,IAAMA,EAAQC,IAAOC,IAAV,KAULC,EAAOF,IAAOC,IAAV,KAQJE,EAASH,IAAOI,OAAV,KASR,SAAAC,GAAK,OAAIA,EAAMC,KACb,yCACA,qDAIAC,EAAU,CACd,QAAW,CAAC,oBAAqB,WAAY,WAAY,SAAU,eACnE,iBAAkB,CAAC,YAAa,kBAAmB,mBACnD,QAAW,CAAC,SAAU,iBAAkB,cAAe,aAAc,eAAgB,iBAAkB,WACvG,kBAAmB,CAAC,uBAAwB,UAAW,QAAS,iBAE5DC,EAAQC,OAAOC,KAAKH,GAEpBI,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUL,EAAb,EAAaA,QAASM,EAAtB,EAAsBA,UAAtB,OACd,oCACE,kBAACd,EAAD,KAAQa,GACR,kBAACV,EAAD,KACGK,EAAQO,KAAI,SAAAC,GAAC,OACZ,kBAACZ,EAAD,CAAQa,IAAKD,EAAGE,QAAS,kBAAMJ,EAAUE,KAAKA,MAEhD,kBAACZ,EAAD,CAAQG,MAAI,EAACW,QAAS,kBAAMJ,EAAUN,EAAQA,EAAQW,OAASC,KAAKC,UAAY,MAAhF,aAgCSC,MAzBf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEZ,EAFF,KAGTa,EAAcnB,EAAQgB,GAC1B,OACE,oCACIA,EAGA,oCACE,kBAAC,EAAD,CAAShB,QAASmB,EAAab,UAAWA,GAA1C,YACW,8BAAOU,GADlB,eAGCE,GACC,kBAAC1B,EAAD,2BACqB,8BAAO0B,GAD5B,KAEE,kBAACtB,EAAD,CAAQc,QAAS,WAAQO,EAAQ,IAAKX,EAAU,MAAhD,WATN,kBAAC,EAAD,CAASN,QAASC,EAAOK,UAAWW,GAApC,uBCrDYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93371922.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.div`\n  text-align:center;\n  vertical-align: middle;\n  font-size:1.4em;\n  padding:1em;\n  span {\n    color:#0084ff;\n  }\n`;\n\nconst Btns = styled.div`\n  max-width:75em;\n  margin:auto;\n  display:grid;\n  grid-template-columns: repeat(auto-fit, 15em);\n  justify-content: center\n`;\n\nconst Button = styled.button`\n  margin:0.5em;\n  padding: 0.75em 1.5em;\n  border:none;\n  font-weight:550;\n  border-radius:0.3em;\n  :hover{\n    filter:brightness(90%);\n  }\n  ${props => props.prim\n    ? 'background-color: #0084ff;color:white;'\n    : 'background-color: #e0e1e2;color:rgba(0,0,0,0.8)'\n  }\n`;\n\nconst choices = {\n  \"Western\": [\"East Side Mario's\", \"Williams\", \"Harvey's\", \"Subway\", \"Mel's Diner\"],\n  \"Middle Eastern\": [\"Kabob Hut\", \"Lazeez Shawarma\", \"Aunty's Kitchen\"],\n  \"Chinese\": [\"Chen's\", \"Morals Village\", \"Mr Panino's\", \"Baba Grill\", \"Gol's Noodle\", \"Foodie Fruitie\", \"Mr. Yin\"],\n  \"Korean/Japanese\": [\"Izna Japanese Noodle\", \"Asakusa\", \"Sowon\", \"Nori village\"]\n}\nconst types = Object.keys(choices);\n\nconst Chooser = ({ children, choices, setChoice }) => (\n  <>\n    <Title>{children}</Title>\n    <Btns>\n      {choices.map(c =>\n        <Button key={c} onClick={() => setChoice(c)}>{c}</Button>\n      )}\n      <Button prim onClick={() => setChoice(choices[choices.length * Math.random() << 0])}>\n        Random\n        </Button>\n    </Btns>\n  </>\n);\n\nfunction App() {\n  const [type, setType] = useState(\"\");\n  const [choice, setChoice] = useState(\"\");\n  let restaurants = choices[type];\n  return (\n    <>\n      {!type ?\n        <Chooser choices={types} setChoice={setType} >Choose a category</Chooser>\n        :\n        <>\n          <Chooser choices={restaurants} setChoice={setChoice} >\n            Choose a <span>{type}</span> restaurant\n          </Chooser>\n          {choice &&\n            <Title>\n              Your restaurant is <span>{choice}</span> !\n              <Button onClick={() => { setType(\"\"); setChoice(\"\") }}>Retry</Button>\n            </Title>\n          }\n        </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}